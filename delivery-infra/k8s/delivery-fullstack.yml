# Frontend Service
apiVersion: v1
kind: Service
metadata:
  name: delivery-frontend-service
  namespace: dev01
spec:
  type: NodePort
  selector:
    app: delivery-app-frontend
  ports:
    - port: 80
      targetPort: 7900
      nodePort: 30081
---
# Frontend Deployment (Vite)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: delivery-app-frontend
  namespace: dev01
spec:
  replicas: 1
  selector:
    matchLabels:
      app: delivery-app-frontend
  template:
    metadata:
      labels:
        app: delivery-app-frontend
    spec:
      containers:
        - name: delivery-app-frontend
          image: nkantartzopoulos/delivery-app-frontend:latest
          ports:
            - containerPort: 7900
          readinessProbe:
            httpGet:
              path: /
              port: 7900
            initialDelaySeconds: 5
            periodSeconds: 5
---
# Backend internal service (ClusterIP)
apiVersion: v1
kind: Service
metadata:
  name: delivery-backend-service
  namespace: dev01
spec:
  selector:
    app: delivery-app-backend
  ports:
    - port: 8080
      targetPort: 8080
---
# Backend Deployment (Spring Boot)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: delivery-app-backend
  namespace: dev01
spec:
  replicas: 1
  selector:
    matchLabels:
      app: delivery-app-backend
  template:
    metadata:
      labels:
        app: delivery-app-backend
    spec:
      containers:
        - name: delivery-app-backend
          image: nkantartzopoulos/delivery-app-backend:latest
          ports:
            - containerPort: 8080
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: "prod"
            - name: SPRING_DATASOURCE_URL
              value: "jdbc:postgresql://delivery-app-postgres:5432/delivery"
            - name: SPRING_DATASOURCE_USERNAME
              value: "postgres"
            - name: SPRING_DATASOURCE_PASSWORD
              value: "postgres"
            - name: SPRING_FLYWAY_SCHEMAS
              value: "delivery"
            - name: SPRING_FLYWAY_DEFAULT_SCHEMA
              value: "delivery"
            - name: SPRING_JPA_PROPERTIES_HIBERNATE_DEFAULT_SCHEMA
              value: "delivery"
            - name: ENV_COMPANY_NAME
              value: "Kubernetes company name"
          readinessProbe:
            tcpSocket:
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 5
---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: delivery-app-postgres
  namespace: dev01
spec:
  selector:
    app: delivery-app-postgres
  ports:
    - port: 5432
      targetPort: 5432
---
# PostgreSQL StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: delivery-app-postgres
  namespace: dev01
spec:
  serviceName: delivery-app-postgres
  replicas: 1
  selector:
    matchLabels:
      app: delivery-app-postgres
  template:
    metadata:
      labels:
        app: delivery-app-postgres
    spec:
      containers:
        - name: postgres
          image: postgres:17
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_DB
              value: "delivery"
            - name: POSTGRES_USER
              value: "postgres"
            - name: POSTGRES_PASSWORD
              value: "postgres"
          volumeMounts:
            - name: k8s-delivery-postgres-storage
              mountPath: /var/lib/postgresql/data
  volumeClaimTemplates:
    - metadata:
        name: k8s-delivery-postgres-storage
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 1Gi
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: delivery-app-ingress
  namespace: dev01
  annotations:
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://dev01delivery.rtlan.gr"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, PUT, POST, DELETE, PATCH, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization"
spec:
  ingressClassName: nginx #ingress controller running in your cluster.
  rules:
    - host: dev01delivery.rtlan.gr
      http:
        paths:
          - path: /api
            pathType: Prefix
            backend:
              service:
                name: delivery-backend-service
                port:
                  number: 8080
          - path: /
            pathType: Prefix
            backend:
              service:
                name: delivery-frontend-service
                port:
                  number: 80
