---
# Backend internal service (NodePort for external testing)
apiVersion: v1
kind: Service
metadata:
  name: delivery-backend-svc
  namespace: dev01
spec:
  type: NodePort
  selector:
    app: delivery-app-backend
  ports:
    - port: 30201
      targetPort: 8080
      nodePort: 30201
---
# Backend Deployment (Spring Boot)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: delivery-app-backend
  namespace: dev01
spec:
  replicas: 1
  selector:
    matchLabels:
      app: delivery-app-backend
  template:
    metadata:
      labels:
        app: delivery-app-backend
        tech: springboot
    spec:
      containers:
        - name: delivery-app-backend
          image: nkantartzopoulos/delivery-app-backend:latest
          ports:
            - containerPort: 8080
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: "prod"
            - name: SPRING_DATASOURCE_URL
              value: "jdbc:postgresql://delivery-app-postgres:5432/delivery"
            - name: SPRING_DATASOURCE_USERNAME
              value: "postgres"
            - name: SPRING_DATASOURCE_PASSWORD
              value: "postgres"
            - name: SPRING_FLYWAY_SCHEMAS
              value: "delivery"
            - name: SPRING_FLYWAY_DEFAULT_SCHEMA
              value: "delivery"
            - name: SPRING_JPA_PROPERTIES_HIBERNATE_DEFAULT_SCHEMA
              value: "delivery"
            - name: ENV_COMPANY_NAME
              value: "Kubernetes company name"
          readinessProbe:
            tcpSocket:
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 5
---
# Prometheus ConfigMap (for scraping backend metrics)
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: dev01
data:
  prometheus.yml: |
    global:
      scrape_interval: 5s
    scrape_configs:
      - job_name: 'spring-boot-backend'
        metrics_path: '/actuator/prometheus'
        static_configs:
          - targets: ['delivery-backend-svc.dev01.svc.cluster.local:30201']
---
# Prometheus Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: dev01
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
        - name: prometheus
          image: prom/prometheus
          args:
            - "--config.file=/etc/prometheus/prometheus.yml"
          ports:
            - containerPort: 9090
          volumeMounts:
            - name: prometheus-config-volume
              mountPath: /etc/prometheus
      volumes:
        - name: prometheus-config-volume
          configMap:
            name: prometheus-config
---
# Prometheus Service
apiVersion: v1
kind: Service
metadata:
  name: prometheus-svc
  namespace: dev01
spec:
  type: NodePort
  ports:
    - port: 9090
      targetPort: 9090
      nodePort: 30301
  selector:
    app: prometheus
---
# Grafana Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: dev01
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
        - name: grafana
          image: grafana/grafana
          ports:
            - containerPort: 3000
          env:
            - name: GF_SECURITY_ADMIN_PASSWORD
              value: "admin"
---
# Grafana Service
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: dev01
spec:
  type: NodePort
  ports:
    - port: 3000
      targetPort: 3000
      nodePort: 30401
  selector:
    app: grafana
